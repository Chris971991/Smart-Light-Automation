blueprint:
  name: Smart Presence Lighting Control
  description: >
    Smartly manages lighting by adapting to presence, room darkness, and manual
    adjustments. Designed for use with EPO (Everything Presence One) sensors or
    similar devices providing occupancy detection and illuminance sensing.
    
    This automation will:
    - Turn lights on automatically when dark and someone is present
    - Turn lights off when room is vacant for a configurable time
    - Respect manual overrides when you control lights
    - Intelligently clear overrides when you manually turn off lights in bright rooms
    - Maintain overrides when you manually override the automation's behavior
    - Clear overrides after configurable timeout or room vacancy
    
    IMPORTANT: Before using this blueprint, you MUST create the following helper entities:
    1. input_boolean.[room_name]_automation_active - Tracks when automation is active
    2. input_boolean.[room_name]_manual_override - Tracks manual override state
    3. input_boolean.[room_name]_light_auto_on - Tracks if light was auto-turned on
    4. input_text.[room_name]_last_automation_action - Stores last action timestamp
    Replace [room_name] with your actual room name (e.g., office, bedroom, etc.)

  domain: automation
  input:
    room_name:
      name: Room Name
      description: Name of the room (used in logs and for entity identification)
      selector:
        text:
    presence_pir_sensor:
      name: PIR Motion Sensor
      description: PIR motion sensor entity
      selector:
        entity:
          domain: binary_sensor
    presence_mmwave_sensor:
      name: mmWave Occupancy Sensor
      description: mmWave or radar-based occupancy sensor
      selector:
        entity:
          domain: binary_sensor
    illuminance_sensor:
      name: Illuminance Sensor
      description: Sensor that measures room brightness in lux
      selector:
        entity:
          domain: sensor
    light_switch:
      name: Light Switch/Entity
      description: The light switch or entity to control
      selector:
        entity:
          domain: [switch, light]
    automation_active_helper:
      name: Automation Active Helper
      description: >
        Helper to track automation active state. You must manually create this
        input_boolean entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_automation_active
      selector:
        entity:
          domain: input_boolean
    manual_override_helper:
      name: Manual Override Helper
      description: >
        Helper to track manual override state. You must manually create this
        input_boolean entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_manual_override
      selector:
        entity:
          domain: input_boolean
    light_auto_on_helper:
      name: Light Auto On Helper
      description: >
        Helper to track if light was automatically turned on. You must manually
        create this input_boolean entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_light_auto_on
      selector:
        entity:
          domain: input_boolean
    last_automation_action_helper:
      name: Last Automation Action Helper
      description: >
        Helper to track last automation action time. You must manually create
        this input_text entity before using this blueprint.
      default: input_text.{{ input.room_name }}_last_automation_action
      selector:
        entity:
          domain: input_text
    dark_threshold:
      name: Dark Threshold
      description: Lux threshold below which the room is considered dark
      default: 5
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: lux
          mode: slider
          step: 1
    bright_threshold:
      name: Bright Threshold
      description: Lux threshold above which the room is considered bright
      default: 70
      selector:
        number:
          min: 20
          max: 500
          unit_of_measurement: lux
          mode: slider
          step: 5
    extremely_dark_threshold:
      name: Extremely Dark Threshold
      description: Lux threshold below which the room is considered extremely dark
      default: 2
      selector:
        number:
          min: 0
          max: 20
          unit_of_measurement: lux
          mode: slider
          step: 0.5
    sensor_off_latency_input:
      name: Sensor Off Latency Entity (Optional)
      description: >
        EPO sensor's off latency entity (leave blank to use fixed value).
        For EPO sensors, this is typically number.everything_presence_one_ROOM_occupancy_off_latency
      default: number.everything_presence_one_{{ input.room_name }}_occupancy_off_latency
      selector:
        entity:
          domain: number
          multiple: false
    fixed_latency_seconds:
      name: Fixed Off Latency (seconds)
      description: >
        Fixed off latency value in seconds, used if sensor_off_latency_input is not available
      default: 60
      selector:
        number:
          min: 10
          max: 300
          unit_of_measurement: sec
          mode: slider
          step: 10
    vacancy_timeout_multiplier:
      name: Vacancy Timeout Multiplier
      description: >
        Multiplier for sensor off latency to determine vacancy timeout.
        Total vacancy timeout = sensor_off_latency Ã— multiplier (in minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 30
          mode: slider
          step: 1
    override_timeout_hours:
      name: Override Timeout Hours
      description: Number of hours after which the manual override will be automatically cleared
      default: 2
      selector:
        number:
          min: 1
          max: 24
          unit_of_measurement: hours
          mode: slider
          step: 0.5
    enable_debug_logs:
      name: Enable Debug Logs
      description: Enable detailed debug logging
      default: false
      selector:
        boolean:

# Automation definition
variables:
  room_name: !input room_name
  presence_pir_sensor: !input presence_pir_sensor
  presence_mmwave_sensor: !input presence_mmwave_sensor
  illuminance_sensor: !input illuminance_sensor
  light_switch: !input light_switch
  automation_active_helper: !input automation_active_helper
  manual_override_helper: !input manual_override_helper
  light_auto_on_helper: !input light_auto_on_helper
  last_automation_action_helper: !input last_automation_action_helper
  dark_threshold: !input dark_threshold
  bright_threshold: !input bright_threshold
  extremely_dark_threshold: !input extremely_dark_threshold
  override_timeout_hours: !input override_timeout_hours
  enable_debug_logs: !input enable_debug_logs
  sensor_off_latency_entity: !input sensor_off_latency_input
  fixed_latency_seconds: !input fixed_latency_seconds
  vacancy_timeout_multiplier: !input vacancy_timeout_multiplier
  sensor_off_latency_seconds: >-
    {% if sensor_off_latency_entity != '' and states(sensor_off_latency_entity) != 'unknown' and states(sensor_off_latency_entity) != 'unavailable' %}
      {{ states(sensor_off_latency_entity) | float(fixed_latency_seconds) }}
    {% else %}
      {{ fixed_latency_seconds }}
    {% endif %}
  vacancy_timeout_minutes: >-
    {{ ([((sensor_off_latency_seconds * vacancy_timeout_multiplier) / 60) | round(0, 'ceil'), 1] | max) | int(5) }}
  illuminance: "{{ states(illuminance_sensor)|float(0) }}"
  is_dark: "{{ illuminance < dark_threshold }}"
  is_bright: "{{ illuminance > bright_threshold }}"
  is_extremely_dark: "{{ illuminance < extremely_dark_threshold }}"
  pir_active: "{{ is_state(presence_pir_sensor, 'on') }}"
  mmwave_active: "{{ is_state(presence_mmwave_sensor, 'on') }}"
  someone_present: "{{ pir_active or mmwave_active }}"
  vacant_for_timeout: |-
    {{ not someone_present and
      (now() - states[presence_pir_sensor].last_changed).total_seconds() > (vacancy_timeout_minutes * 60) and
      (now() - states[presence_mmwave_sensor].last_changed).total_seconds() > (vacancy_timeout_minutes * 60) }}
  lights_on: "{{ is_state(light_switch, 'on') }}"
  user_toggled_lights: "{{ trigger.platform == 'state' and trigger.entity_id == light_switch }}"
  user_turned_on: "{{ user_toggled_lights and trigger.to_state.state == 'on' }}"
  user_turned_off: "{{ user_toggled_lights and trigger.to_state.state == 'off' }}"
  manual_override: "{{ is_state(manual_override_helper, 'on') }}"
  automation_inactive: "{{ is_state(automation_active_helper, 'off') }}"
  in_middle_range: "{{ not is_dark and not is_bright }}"
  hourly_check: "{{ trigger.platform == 'time_pattern' }}"
  override_timeout: |-
    {{ hourly_check and is_state(manual_override_helper, 'on') and
      (now() - states[manual_override_helper].last_changed).total_seconds() > (override_timeout_hours * 3600) }}
  sun_state: "{{ states('sun.sun') }}"
  is_daytime: "{{ sun_state == 'above_horizon' }}"
  is_nighttime: "{{ sun_state == 'below_horizon' }}"
  light_change_time: "{{ (now() - states[light_switch].last_changed).total_seconds() }}"
  light_recently_changed: "{{ light_change_time < 10 }}"
  time_since_last_automation: >-
    {% if states(last_automation_action_helper) != 'unknown' and
    states(last_automation_action_helper) != '' %}
      {% set timestamp = states(last_automation_action_helper).split('+')[0] %}
      {{ (now().replace(tzinfo=None) - strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')).total_seconds() }}
    {% else %}
      9999
    {% endif %}
  automation_initiated_change: >-
    {% if states(last_automation_action_helper) != 'unknown' and
    states(last_automation_action_helper) != '' %}
      {% set timestamp = states(last_automation_action_helper).split('+')[0] %}
      {% set time_diff = (now().replace(tzinfo=None) - strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')).total_seconds() %}
      {{ time_diff < 3.0 and time_diff > 0 }}
    {% else %}
      false
    {% endif %}
  auto_would_turn_on_intent: "{{ (is_dark or is_extremely_dark) and someone_present }}"
  auto_would_turn_off_intent: "{{ not someone_present }}"
  auto_would_preserve_state_intent: >-
    {{ (in_middle_range and someone_present) or (is_bright and someone_present)
    }}

trigger:
  - entity_id:
      - !input presence_pir_sensor
      - !input presence_mmwave_sensor 
      - !input illuminance_sensor
      - !input light_switch
      - sun.sun
      - !input sensor_off_latency_input
    platform: state
  - platform: time_pattern
    hours: /1

action:
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: info
          message: >-
            ==================== {{ room_name | upper }} AUTOMATION TRIGGERED
            ====================
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} INITIAL STATE: trigger_platform={{
            trigger.platform }},  trigger_entity={{ trigger.entity_id }},
            illuminance={{ illuminance }},  is_dark={{ is_dark }},
            is_extremely_dark={{ is_extremely_dark }},  someone_present={{
            someone_present }} (pir={{ pir_active }}, mmwave={{ mmwave_active }}), 
            lights_on={{ lights_on }}, manual_override={{ manual_override }}, 
            vacancy_timeout_minutes={{ vacancy_timeout_minutes }},
            sensor_off_latency_seconds={{ sensor_off_latency_seconds }},
            last_automation_action={{ states(last_automation_action_helper) }}
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} TRIGGER DETAILS:  {% if trigger.platform ==
            'state' %}from_state={{ trigger.from_state.state }}, to_state={{
            trigger.to_state.state }}{% endif %} {% if user_toggled_lights %}USER
            TOGGLED LIGHTS: {{ trigger.from_state.state }} -> {{
            trigger.to_state.state }}{% endif %}
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} ACTION TYPE: user_toggled_lights={{
            user_toggled_lights }},  automation_initiated_change={{
            automation_initiated_change }}, time_since_last_automation={{
            time_since_last_automation }}s

  # Handle manual user actions
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ user_toggled_lights and not automation_initiated_change }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} MANUAL ACTION DETECTED:
                    user_turned_on={{ user_turned_on }}, user_turned_off={{
                    user_turned_off }}
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} HELPER STATES BEFORE:
                    manual_override_helper={{ is_state(manual_override_helper, 'on')
                    }}, automation_active_helper={{
                    is_state(automation_active_helper, 'on') }},
                    light_auto_on_helper={{ is_state(light_auto_on_helper, 'on') }}
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ manual_override_helper }}"
          - delay:
              milliseconds: 100
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} MANUAL OVERRIDE ATTEMPT: Successfully
                    set to {{ is_state(manual_override_helper, 'on') }}
          - delay:
              milliseconds: 300
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} USER TOGGLE DEBUG: illuminance={{
                    illuminance }},  is_dark={{ is_dark }}, is_bright={{ is_bright
                    }}, in_middle_range={{ in_middle_range }},  someone_present={{
                    someone_present }}, user_turned_on={{ user_turned_on }}, 
                    user_turned_off={{ user_turned_off }}, manual_override_var={{
                    manual_override }}, 
                    manual_override_helper_state={{is_state(manual_override_helper,
                    'on')}},  automation_inactive={{ automation_inactive }},
                    is_daytime={{ is_daytime }},  is_nighttime={{ is_nighttime }},
                    light_recently_changed={{ light_recently_changed }}, 
                    calculated_vacancy_min={{ vacancy_timeout_minutes }}, 
                    auto_would_turn_on={{ auto_would_turn_on_intent }}, 
                    auto_would_turn_off={{ auto_would_turn_off_intent }},
                    auto_would_preserve_state={{ auto_would_preserve_state_intent }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ light_auto_on_helper }}"
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} USER TOGGLE: Detected user
                            toggle, turning off light_auto_on_helper.
            default:
              - if:
                  - condition: template
                    value_template: "{{ enable_debug_logs }}"
                then:
                  - service: system_log.write
                    data:
                      level: info
                      message: >-
                        {{ room_name | upper }} USER TOGGLE: Likely automation
                        action, light_auto_on_helper preserved.
          - choose:
              # NEW CONDITION TO CLEAR OVERRIDE WHEN TURNING OFF LIGHTS IN BRIGHT ROOM
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off and is_bright and someone_present }}"
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: debug
                          message: >-
                            {{ room_name | upper }} OVERRIDE CONDITION SET 4 MET:
                            user_turned_off AND is_bright AND someone_present AND
                            automation_inactive
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE AFTER SET 4:
                            Helper state is now {{ is_state(manual_override_helper,
                            'on') }}
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE: Cleared, user turned off 
                            lights in bright room.
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_on }}"
                  - condition: template
                    value_template: >-
                      {{ auto_would_turn_off_intent or
                      auto_would_preserve_state_intent }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: debug
                          message: >-
                            {{ room_name | upper }} OVERRIDE CONDITION SET 1 MET:
                            user_turned_on AND (auto_would_turn_off_intent OR
                            auto_would_preserve_state_intent) AND
                            automation_inactive
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE AFTER SET 1:
                            Helper state is now {{ is_state(manual_override_helper,
                            'on') }}
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE: User turned
                            lights ON. Setting override.
              # Modified SET 2 - Only apply override for non-bright rooms
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off }}"
                  - condition: template
                    value_template: >-
                      {{ (auto_would_turn_on_intent or
                      auto_would_preserve_state_intent) and not is_bright }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: debug
                          message: >-
                            {{ room_name | upper }} OVERRIDE CONDITION SET 2 MET:
                            user_turned_off AND (auto_would_turn_on_intent OR
                            auto_would_preserve_state_intent) AND not is_bright AND
                            automation_inactive
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE AFTER SET 2:
                            Helper state is now {{ is_state(manual_override_helper,
                            'on') }}
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE: User turned
                            lights OFF. Setting override.
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (user_turned_on and auto_would_turn_on_intent) or
                      (user_turned_off and auto_would_turn_off_intent) }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: debug
                          message: >-
                            {{ room_name | upper }} OVERRIDE CONDITION SET 3 MET:
                            (user_turned_on AND auto_would_turn_on_intent) OR
                            (user_turned_off AND auto_would_turn_off_intent) AND
                            automation_inactive
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE AFTER SET 3:
                            Helper state is now {{ is_state(manual_override_helper,
                            'on') }}
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} MANUAL OVERRIDE: Cleared, user
                            action agrees.
            default:
              - if:
                  - condition: template
                    value_template: "{{ enable_debug_logs }}"
                then:
                  - service: system_log.write
                    data:
                      level: warning
                      message: >-
                        {{ room_name | upper }} OVERRIDE UNCLEAR: User toggle did
                        not match specific override conditions.  Debug:
                        user_turned_on={{ user_turned_on }}, user_turned_off={{
                        user_turned_off }}, auto_would_turn_on={{
                        auto_would_turn_on_intent }},  auto_would_turn_off={{
                        auto_would_turn_off_intent }}, auto_would_preserve_state={{
                        auto_would_preserve_state_intent }}, automation_inactive={{
                        automation_inactive }},
                        time_since_automation_active_change={{ (now() -
                        states[automation_active_helper].last_changed).total_seconds()
                        }}s
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AFTER USER TOGGLE PROCESSING:
                    manual_override={{ is_state(manual_override_helper, 'on') }}, 
                    automation_active={{ is_state(automation_active_helper, 'on')
                    }},  light_auto_on={{ is_state(light_auto_on_helper, 'on') }}, 
                    lights_state={{ states(light_switch) }}

  # Main automation logic
  - choose:
      # Skip actions if override is active
      - conditions:
          - condition: template
            value_template: "{{ manual_override }}"
          - condition: template
            value_template: "{{ not user_toggled_lights or automation_initiated_change }}"
          - condition: template
            value_template: "{{ not override_timeout }}"
          - condition: template
            value_template: "{{ not vacant_for_timeout }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} MANUAL OVERRIDE: Skipping auto actions.
                    Vacancy_min: {{ vacancy_timeout_minutes }} DEBUG:
                    manual_override={{ manual_override }}, user_toggled_lights={{
                    user_toggled_lights }},  override_timeout={{ override_timeout
                    }}, vacant_for_timeout={{ vacant_for_timeout }},
                    automation_initiated_change={{ automation_initiated_change }},
                    time_since_pir_change={{ (now() -
                    states[presence_pir_sensor].last_changed).total_seconds() }}s,
                    time_since_mmwave_change={{ (now() -
                    states[presence_mmwave_sensor].last_changed).total_seconds()
                    }}s, vacancy_timeout_seconds={{ vacancy_timeout_minutes * 60 }}s

      # Automatically turn on lights when dark and someone present
      - conditions:
          - condition: template
            value_template: "{{ is_dark or is_extremely_dark }}"
          - condition: template
            value_template: "{{ someone_present }}"
          - condition: template
            value_template: "{{ not lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ not light_recently_changed }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AUTO-ON CONDITIONS MET: is_dark={{
                    is_dark }}, is_extremely_dark={{ is_extremely_dark }}, 
                    someone_present={{ someone_present }}, lights_on={{ lights_on
                    }}, manual_override={{ manual_override }},
                    light_recently_changed={{ light_recently_changed }}
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_on
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AUTO: Turned ON - Dark/Extremely Dark &
                    Occupied.

      # Automatically turn off lights when vacant
      - conditions:
          - condition: template
            value_template: "{{ not someone_present }}"
          - condition: template
            value_template: "{{ lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AUTO-OFF CONDITIONS MET:
                    someone_present={{ someone_present }},  lights_on={{ lights_on
                    }}, manual_override={{ manual_override }}
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_off
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} AUTO: Turned OFF - Vacant."

      # Clear override after vacancy timeout
      - conditions:
          - condition: template
            value_template: "{{ vacant_for_timeout }}"
          - condition: template
            value_template: "{{ manual_override }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} VACANT TIMEOUT CONDITIONS MET:
                    vacant_for_timeout={{ vacant_for_timeout }},  manual_override={{
                    manual_override }},  time_since_pir_change={{ (now() -
                    states[presence_pir_sensor].last_changed).total_seconds() }}s,
                    time_since_mmwave_change={{ (now() -
                    states[presence_mmwave_sensor].last_changed).total_seconds()
                    }}s, vacancy_timeout_seconds={{ vacancy_timeout_minutes * 60 }}s
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - delay:
              milliseconds: 100
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} VACANCY TIMEOUT: Override cleared status
                    is {{ not is_state(manual_override_helper, 'on') }}
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} OVERRIDE: Cleared after vacancy ({{
                    vacancy_timeout_minutes }}m / {{ sensor_off_latency_seconds }}s
                    latency).
          - service: automation.trigger
            target:
              entity_id: "{{this.entity_id}}"
            data:
              skip_condition: true

      # Clear override after hourly timeout
      - conditions:
          - condition: template
            value_template: "{{ override_timeout }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} HOURLY TIMEOUT CONDITIONS MET:
                    override_timeout={{ override_timeout }}, is_state_override={{
                    is_state(manual_override_helper, 'on') }},
                    override_time_seconds={{ (now() -
                    states[manual_override_helper].last_changed).total_seconds()
                    }}s, timeout_seconds={{ override_timeout_hours * 3600 }}s
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - delay:
              milliseconds: 100
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} HOURLY TIMEOUT: Override cleared status
                    is {{ not is_state(manual_override_helper, 'on') }}
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} OVERRIDE: Cleared after hourly timeout."
          - service: automation.trigger
            target:
              entity_id: "{{this.entity_id}}"
            data:
              skip_condition: true

    # No conditions met
    default:
      - if:
          - condition: template
            value_template: "{{ enable_debug_logs }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                {{ room_name | upper }} NO CONDITIONS MET: is_dark={{ is_dark }},
                is_extremely_dark={{ is_extremely_dark }}, someone_present={{
                someone_present }}, lights_on={{ lights_on }}, manual_override={{
                manual_override }}, light_recently_changed={{ light_recently_changed
                }}, vacant_for_timeout={{ vacant_for_timeout }}, override_timeout={{
                override_timeout }}

  # Final state logging
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} FINAL STATE: manual_override={{
            is_state(manual_override_helper, 'on') }},  automation_active={{
            is_state(automation_active_helper, 'on') }},  light_auto_on={{
            is_state(light_auto_on_helper, 'on') }}, lights_state={{
            states(light_switch) }}
      - service: system_log.write
        data:
          level: info
          message: >-
            ==================== {{ room_name | upper }} AUTOMATION COMPLETE
            ====================

mode: queued
max: 10