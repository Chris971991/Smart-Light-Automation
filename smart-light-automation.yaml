blueprint:
  name: Smart Presence Lighting Control with Bed Sensor
  description: >
    # Smart Presence Lighting Control with Bed Sensor

    Intelligently manages your lighting based on room occupancy, light levels, bed occupancy, and manual controls.
    Works with any combination of motion sensors, occupancy sensors, illuminance sensors, and optional bed sensors.

    ## Features

    • **Automatic Control** - Turns lights on when dark and someone is present
    
    • **Bed Sensor Integration** - Respects sleeping partners by delaying or preventing light activation
    
    • **Energy Saving** - Turns lights off when room is vacant for a configurable time
    
    • **Smart Overrides** - Respects when you manually control lights
    
    • **Bright Room Logic** - Clears overrides when you turn off lights in well-lit rooms
    
    • **Timeout Protection** - Clears overrides after configurable timeout or room vacancy

    ## Compatible Sensors

    This blueprint works with:
    • Everything Presence One/Light sensors
    • Standard motion/PIR sensors  
    • mmWave/radar presence sensors
    • Any illuminance/light level sensor
    • Bed occupancy sensors (detects sleeping people that motion sensors miss)
    • Or combinations of these sensors
    
    ## REQUIRED SETUP

    Before using this blueprint, you MUST create these helper entities:
    
    1. `input_boolean.[room_name]_automation_active`
       Tracks when automation is running an action
    
    2. `input_boolean.[room_name]_manual_override`
       Tracks when user has manually overridden automation
    
    3. `input_boolean.[room_name]_light_auto_on`
       Tracks if light was automatically turned on
    
    4. `input_text.[room_name]_last_automation_action`
       Stores timestamp of last automation action
    
    5. `input_boolean.[room_name]_bed_delay_active` (only if using bed sensor)
       Tracks when bed delay timer is active - ONLY CREATE THIS FOR BEDROOMS
    
    Replace [room_name] with your actual room name (office, bedroom, etc.) ree

  domain: automation
  input:
    room_name:
      name: Room Name
      description: >
        Name of the room used throughout the automation for entity naming and logging.
        This should be a simple name like 'office', 'bedroom', etc. without spaces.
      selector:
        text:
    presence_pir_sensor:
      name: PIR Motion Sensor
      description: >
        Motion sensor that detects immediate movement. This can be any PIR/motion sensor.
        For Everything Presence devices, use binary_sensor.everything_presence_xxx_pir.
        For standard motion sensors, use your motion sensor entity.
      selector:
        entity:
          domain: binary_sensor
    presence_mmwave_sensor:
      name: Occupancy Sensor (Optional)
      description: >
        Secondary occupancy sensor that can detect presence even without movement.
        If you only have one motion sensor, you can select the same entity again.
        For Everything Presence devices, use binary_sensor.everything_presence_xxx_occupancy.
        For mmWave/radar sensors, use your occupancy entity.
      selector:
        entity:
          domain: binary_sensor
    illuminance_sensor:
      name: Illuminance Sensor
      description: >
        Sensor that measures room brightness in lux (lumens per square meter).
        For Everything Presence devices, use sensor.everything_presence_xxx_illuminance.
        For other light sensors, select any sensor that provides light level readings.
        If you don't have a light sensor, create an input_number helper and adjust manually.
      selector:
        entity:
          domain: sensor
    light_switch:
      name: Light Switch/Entity
      description: >
        The light switch or light entity that this automation will control.
        Works with both switch.* entities (simple on/off) and light.* entities (supports brightness).
      selector:
        entity:
          domain: [switch, light]
    enable_bed_sensor:
      name: Enable Bed Sensor Integration
      description: >
        Enable bed sensor integration for bedroom automation. The bed sensor serves two purposes:
        1. Detects occupancy when people are sleeping (motion sensors can't detect stationary sleepers)
        2. Provides sleep-aware lighting control to avoid disturbing partners
        Highly recommended for bedrooms where people sleep.
      default: false
      selector:
        boolean:
    bed_sensor:
      name: Bed Occupancy Sensor (Optional)
      description: >
        Bed sensor that detects if someone is in bed. This also serves as an occupancy detector
        for sleeping people that motion sensors can't detect. Choose "either" side for best results
        as it detects if anyone is in bed regardless of which side.
        For bed sensors, use binary_sensor.bed_presence_xxx_bed_occupied_either.
      default: binary_sensor.bed_presence_master_bedroom_bed_occupied_either
      selector:
        entity:
          domain: binary_sensor
    bed_sensor_fast:
      name: Fast Bed Occupancy Sensor (Optional)
      description: >
        Fast response bed sensor for immediate detection when someone gets in/out of bed.
        Also serves as occupancy detection for sleeping people. Choose "either" side for best results.
        For bed sensors, use binary_sensor.bed_presence_xxx_bed_occupied_either_fast.
      default: binary_sensor.bed_presence_master_bedroom_bed_occupied_either_fast
      selector:
        entity:
          domain: binary_sensor
    use_fast_bed_sensor:
      name: Use Fast Bed Sensor
      description: >
        When enabled, uses the fast bed sensor instead of the standard one.
        Fast sensors respond more quickly but may be more sensitive to false positives.
      default: false
      selector:
        boolean:
    bed_delay_seconds:
      name: Bed Occupied Light Delay (seconds)
      description: >
        Delay in seconds before turning on lights when someone is detected in the room
        but the bed is occupied. This gives time for eyes to adjust and avoids waking
        sleeping partners. Set to 0 to turn on lights immediately even with bed occupied.
        Recommended: 5-15 seconds for bathroom trips, 0-5 for general movement.
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: sec
          mode: slider
          step: 1
    bed_brightness_threshold:
      name: Bed Brightness Override Threshold
      description: >
        When room brightness is above this threshold, bed occupancy is ignored
        and lights turn on normally. This prevents the bed sensor from interfering
        during daytime when natural light is sufficient. Set higher to be more
        restrictive about when bed sensor affects lighting.
      default: 15
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: lux
          mode: slider
          step: 1
    automation_active_helper:
      name: Automation Active Helper
      description: >
        Helper entity that tracks when the automation is actively performing an action.
        This prevents the automation from interfering with itself and helps distinguish
        between user actions and automation actions. You MUST create this input_boolean
        entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_automation_active
      selector:
        entity:
          domain: input_boolean
    manual_override_helper:
      name: Manual Override Helper
      description: >
        Helper entity that tracks when a user has manually overridden the automation.
        When active, the automation will not automatically control lights until the
        override is cleared by vacancy timeout or hourly check. You MUST create this
        input_boolean entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_manual_override
      selector:
        entity:
          domain: input_boolean
    light_auto_on_helper:
      name: Light Auto On Helper
      description: >
        Helper entity that tracks whether the light was turned on automatically.
        This is used to make better decisions about when to turn lights off.
        You MUST create this input_boolean entity before using this blueprint.
      default: input_boolean.{{ input.room_name }}_light_auto_on
      selector:
        entity:
          domain: input_boolean
    last_automation_action_helper:
      name: Last Automation Action Helper
      description: >
        Helper entity that stores the timestamp of the last automation action.
        This is used to prevent the automation from reacting to its own actions.
        You MUST create this input_text entity before using this blueprint.
      default: input_text.{{ input.room_name }}_last_automation_action
      selector:
        entity:
          domain: input_text
    bed_delay_helper:
      name: Bed Delay Active Helper (Optional)
      description: >
        Helper entity that tracks when a bed delay timer is active.
        Only required if using bed sensor integration. Create and enter the entity ID:
        input_boolean.[room_name]_bed_delay_active
        Leave blank if not using bed sensors.
      default: ""
      selector:
        text:
    dark_threshold:
      name: Dark Threshold
      description: >
        Lux threshold below which the room is considered dark enough to need lights.
        When illuminance falls below this value AND someone is present, lights will
        turn on automatically. Typically 5-15 lux for most rooms.
      default: 5
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: lux
          mode: slider
          step: 1
    bright_threshold:
      name: Bright Threshold
      description: >
        Lux threshold above which the room is considered bright (has enough natural light).
        This threshold is important for the "clear override when turning off lights in bright room"
        feature. When you manually turn off lights in a bright room, the override is cleared.
        Usually 70-100 lux is appropriate for most rooms.
      default: 70
      selector:
        number:
          min: 5
          max: 500
          unit_of_measurement: lux
          mode: slider
          step: 1
    extremely_dark_threshold:
      name: Extremely Dark Threshold
      description: >
        Lux threshold below which the room is considered extremely dark (pitch black).
        This allows for more aggressive light control in very dark conditions.
        Usually 1-3 lux for complete darkness.
      default: 2
      selector:
        number:
          min: 0
          max: 20
          unit_of_measurement: lux
          mode: slider
          step: 0.5
    sensor_off_latency_input:
      name: Sensor Off Latency Entity (Optional)
      description: >
        Entity that provides the sensor's off latency/timeout value in seconds.
        For Everything Presence devices, use number.everything_presence_xxx_occupancy_off_latency.
        For other sensors, you can leave this blank and use the fixed value below.
        This is only needed if you want to dynamically adjust latency from another UI.
      default: number.everything_presence_one_{{ input.room_name }}_occupancy_off_latency
      selector:
        entity:
          domain: number
          multiple: false
    fixed_latency_seconds:
      name: Fixed Off Latency (seconds)
      description: >
        Fixed off latency value in seconds, used if sensor_off_latency_input is not available.
        This is how long the sensor waits after the last detected motion before reporting "no presence".
        A higher value means the sensor is less responsive but reduces false negatives.
        Typically 30-120 seconds is appropriate, with 60 being a good default.
      default: 60
      selector:
        number:
          min: 10
          max: 300
          unit_of_measurement: sec
          mode: slider
          step: 10
    vacancy_timeout_multiplier:
      name: Vacancy Timeout Multiplier
      description: >
        Multiplier applied to the sensor off latency to determine when a room is considered truly vacant.
        The calculation is: vacancy_timeout_minutes = sensor_off_latency_seconds × multiplier ÷ 60.
        For example, with a 60s off latency and 5× multiplier, the room must be vacant for 5 minutes
        before lights turn off automatically or manual overrides are cleared. Higher values prevent
        false offs but delay automatic actions.
      default: 5
      selector:
        number:
          min: 1
          max: 30
          mode: slider
          step: 1
    override_timeout_hours:
      name: Override Timeout Hours
      description: >
        Maximum number of hours a manual override will remain active before being automatically cleared.
        This ensures that forgotten manual overrides don't permanently disable automation.
        After this time period, automation will resume normal operation even if manual override was set.
        Typical values are 2-4 hours for most rooms.
      default: 2
      selector:
        number:
          min: 1
          max: 24
          unit_of_measurement: hours
          mode: slider
          step: 0.5
    enable_debug_logs:
      name: Enable Debug Logs
      description: >
        Enable detailed debug logging in Home Assistant. These logs can help understand
        the automation's decision process, troubleshoot issues, and fine-tune settings.
        You can view logs in Configuration → Logs, filtered for your room name.
        Recommended to enable during initial setup and disable once everything works.
      default: false
      selector:
        boolean:

# Automation definition
variables:
  room_name: !input room_name
  presence_pir_sensor: !input presence_pir_sensor
  presence_mmwave_sensor: !input presence_mmwave_sensor
  illuminance_sensor: !input illuminance_sensor
  light_switch: !input light_switch
  enable_bed_sensor: !input enable_bed_sensor
  bed_sensor: !input bed_sensor
  bed_sensor_fast: !input bed_sensor_fast
  use_fast_bed_sensor: !input use_fast_bed_sensor
  bed_delay_seconds: !input bed_delay_seconds
  bed_brightness_threshold: !input bed_brightness_threshold
  automation_active_helper: !input automation_active_helper
  manual_override_helper: !input manual_override_helper
  light_auto_on_helper: !input light_auto_on_helper
  last_automation_action_helper: !input last_automation_action_helper
  bed_delay_helper: !input bed_delay_helper
  dark_threshold: !input dark_threshold
  bright_threshold: !input bright_threshold
  extremely_dark_threshold: !input extremely_dark_threshold
  override_timeout_hours: !input override_timeout_hours
  enable_debug_logs: !input enable_debug_logs
  sensor_off_latency_entity: !input sensor_off_latency_input
  fixed_latency_seconds: !input fixed_latency_seconds
  vacancy_timeout_multiplier: !input vacancy_timeout_multiplier
  sensor_off_latency_seconds: >-
    {% if sensor_off_latency_entity != '' and states(sensor_off_latency_entity) != 'unknown' and states(sensor_off_latency_entity) != 'unavailable' %}
      {{ states(sensor_off_latency_entity) | float(fixed_latency_seconds) }}
    {% else %}
      {{ fixed_latency_seconds }}
    {% endif %}
  vacancy_timeout_minutes: >-
    {{ ([((sensor_off_latency_seconds * vacancy_timeout_multiplier) / 60) | round(0, 'ceil'), 1] | max) | int(5) }}
  illuminance: "{{ states(illuminance_sensor)|float(0) }}"
  is_dark: "{{ illuminance < dark_threshold }}"
  is_bright: "{{ illuminance > bright_threshold }}"
  is_extremely_dark: "{{ illuminance < extremely_dark_threshold }}"
  pir_active: "{{ is_state(presence_pir_sensor, 'on') }}"
  mmwave_active: "{{ is_state(presence_mmwave_sensor, 'on') }}"
  someone_present: "{{ pir_active or mmwave_active }}"
  # Bed sensor variables
  active_bed_sensor: >-
    {% if enable_bed_sensor %}
      {% if use_fast_bed_sensor %}
        {{ bed_sensor_fast }}
      {% else %}
        {{ bed_sensor }}
      {% endif %}
    {% else %}
      none
    {% endif %}
  bed_occupied: >-
    {% if enable_bed_sensor and active_bed_sensor != 'none' %}
      {{ is_state(active_bed_sensor, 'on') }}
    {% else %}
      false
    {% endif %}
  bed_sensor_available: >-
    {% if enable_bed_sensor and active_bed_sensor != 'none' %}
      {{ states(active_bed_sensor) not in ['unknown', 'unavailable'] }}
    {% else %}
      false
    {% endif %}
  bed_should_delay_lights: >-
    {% if enable_bed_sensor and bed_sensor_available %}
      {{ bed_occupied and illuminance < bed_brightness_threshold and bed_delay_seconds > 0 }}
    {% else %}
      false
    {% endif %}
  bed_should_prevent_lights: >-
    {% if enable_bed_sensor and bed_sensor_available %}
      {{ bed_occupied and illuminance < bed_brightness_threshold and bed_delay_seconds == 0 }}
    {% else %}
      false
    {% endif %}
  bed_delay_active: >-
    {% if enable_bed_sensor and bed_delay_helper != '' %}
      {{ is_state(bed_delay_helper, 'on') }}
    {% else %}
      false
    {% endif %}
  vacant_for_timeout: |-
    {{ not someone_present and
      (now() - states[presence_pir_sensor].last_changed).total_seconds() > (vacancy_timeout_minutes * 60) and
      (now() - states[presence_mmwave_sensor].last_changed).total_seconds() > (vacancy_timeout_minutes * 60) }}
  lights_on: "{{ is_state(light_switch, 'on') }}"
  user_toggled_lights: "{{ trigger.platform == 'state' and trigger.entity_id == light_switch }}"
  user_turned_on: "{{ user_toggled_lights and trigger.to_state.state == 'on' }}"
  user_turned_off: "{{ user_toggled_lights and trigger.to_state.state == 'off' }}"
  manual_override: "{{ is_state(manual_override_helper, 'on') }}"
  automation_inactive: "{{ is_state(automation_active_helper, 'off') }}"
  in_middle_range: "{{ not is_dark and not is_bright }}"
  hourly_check: "{{ trigger.platform == 'time_pattern' }}"
  bed_delay_timeout: >-
    {% if enable_bed_sensor and bed_delay_helper != '' %}
      {{ trigger.entity_id == bed_delay_helper and trigger.to_state.state == 'off' and trigger.from_state.state == 'on' }}
    {% else %}
      false
    {% endif %}
  override_timeout: |-
    {{ hourly_check and is_state(manual_override_helper, 'on') and
      (now() - states[manual_override_helper].last_changed).total_seconds() > (override_timeout_hours * 3600) }}
  sun_state: "{{ states('sun.sun') }}"
  is_daytime: "{{ sun_state == 'above_horizon' }}"
  is_nighttime: "{{ sun_state == 'below_horizon' }}"
  light_change_time: "{{ (now() - states[light_switch].last_changed).total_seconds() }}"
  light_recently_changed: "{{ light_change_time < 3 }}"
  time_since_last_automation: >-
    {% if states(last_automation_action_helper) != 'unknown' and
    states(last_automation_action_helper) != '' %}
      {% set timestamp = states(last_automation_action_helper).split('+')[0] %}
      {{ (now().replace(tzinfo=None) - strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')).total_seconds() }}
    {% else %}
      9999
    {% endif %}
  automation_initiated_change: >-
    {% if states(last_automation_action_helper) != 'unknown' and
    states(last_automation_action_helper) != '' %}
      {% set timestamp = states(last_automation_action_helper).split('+')[0] %}
      {% set time_diff = (now().replace(tzinfo=None) - strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')).total_seconds() %}
      {{ time_diff < 5.0 and time_diff > 0 }}
    {% else %}
      false
    {% endif %}
  auto_would_turn_on_intent: >-
    {{ (is_dark or is_extremely_dark) and someone_present and not bed_should_prevent_lights and not bed_delay_active }}
  auto_would_turn_off_intent: >-
    {{ not someone_present or (enable_bed_sensor and bed_occupied) }}
  auto_would_preserve_state_intent: >-
    {{ (in_middle_range and someone_present and not bed_occupied) or 
       (is_bright and someone_present) or 
       (bed_should_delay_lights and not bed_delay_active) }}

trigger:
  - entity_id:
      - !input presence_pir_sensor
      - !input presence_mmwave_sensor 
      - !input illuminance_sensor
      - !input light_switch
      - sun.sun
      - !input sensor_off_latency_input
    platform: state
  - entity_id: !input bed_sensor
    platform: state
  - entity_id: !input bed_sensor_fast
    platform: state
  - platform: time_pattern
    hours: /1

action:
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: info
          message: >-
            ==================== {{ room_name | upper }} AUTOMATION TRIGGERED
            ====================
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} INITIAL STATE: trigger_platform={{
            trigger.platform }}, trigger_entity={{ trigger.entity_id }},
            illuminance={{ illuminance }}, is_dark={{ is_dark }},
            is_extremely_dark={{ is_extremely_dark }}, someone_present={{
            someone_present }} (pir={{ pir_active }}, mmwave={{ mmwave_active }}), 
            lights_on={{ lights_on }}, manual_override={{ manual_override }}, 
            vacancy_timeout_minutes={{ vacancy_timeout_minutes }},
            sensor_off_latency_seconds={{ sensor_off_latency_seconds }},
            last_automation_action={{ states(last_automation_action_helper) }}
      - if:
          - condition: template
            value_template: "{{ enable_bed_sensor }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                {{ room_name | upper }} BED SENSOR STATE: bed_occupied={{ bed_occupied }},
                bed_should_delay={{ bed_should_delay_lights }}, bed_should_prevent={{ bed_should_prevent_lights }},
                bed_delay_active={{ bed_delay_active }}, bed_sensor_available={{ bed_sensor_available }},
                active_bed_sensor={{ active_bed_sensor }}, bed_delay_timeout={{ bed_delay_timeout }}

  # Handle bed delay timeout - turn on lights after delay
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ bed_delay_timeout }}"
          - condition: template
            value_template: "{{ someone_present }}"
          - condition: template
            value_template: "{{ is_dark or is_extremely_dark }}"
          - condition: template
            value_template: "{{ not lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} BED DELAY TIMEOUT: Turning on lights after bed delay
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_on
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"

  # Handle manual user actions
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ user_toggled_lights and not automation_initiated_change }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} MANUAL ACTION DETECTED:
                    user_turned_on={{ user_turned_on }}, user_turned_off={{
                    user_turned_off }}
          # Cancel any active bed delay when user manually controls lights
          - if:
              - condition: template
                value_template: "{{ enable_bed_sensor and bed_delay_helper != '' and bed_delay_active }}"
            then:
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ bed_delay_helper }}"
              - if:
                  - condition: template
                    value_template: "{{ enable_debug_logs }}"
                then:
                  - service: system_log.write
                    data:
                      level: info
                      message: >-
                        {{ room_name | upper }} MANUAL ACTION: Cancelled bed delay timer
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ manual_override_helper }}"
          - delay:
              milliseconds: 100
          - choose:
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ light_auto_on_helper }}"
          # Rest of manual override logic remains the same as original...
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off and is_bright and someone_present }}"
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                  - condition: template
                    value_template: >-
                      {{ (now() -
                      states[automation_active_helper].last_changed).total_seconds()
                      > 2.0 }}
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_on }}"
                  - condition: template
                    value_template: >-
                      {{ auto_would_turn_off_intent or
                      auto_would_preserve_state_intent }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off }}"
                  - condition: template
                    value_template: >-
                      {{ (auto_would_turn_on_intent or
                      auto_would_preserve_state_intent) and not is_bright }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (user_turned_on and auto_would_turn_on_intent) or
                      (user_turned_off and auto_would_turn_off_intent) }}
                  - condition: template
                    value_template: "{{ automation_inactive }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"

  # Main automation logic
  - choose:
      # Skip actions if override is active
      - conditions:
          - condition: template
            value_template: "{{ manual_override }}"
          - condition: template
            value_template: "{{ not user_toggled_lights or automation_initiated_change }}"
          - condition: template
            value_template: "{{ not override_timeout }}"
          - condition: template
            value_template: "{{ not vacant_for_timeout }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} MANUAL OVERRIDE: Skipping auto actions.

      # Automatically turn on lights when someone gets out of bed in dark room
      - conditions:
          - condition: template
            value_template: "{{ not bed_occupied }}"
          - condition: template
            value_template: "{{ is_dark or is_extremely_dark }}"
          - condition: template
            value_template: "{{ someone_present }}"
          - condition: template
            value_template: "{{ not lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ enable_bed_sensor and bed_sensor_available }}"
          - condition: template
            value_template: "{{ trigger.entity_id == active_bed_sensor and trigger.to_state.state == 'on' }}"
          - condition: template
            value_template: "{{ trigger.entity_id == active_bed_sensor and trigger.to_state.state == 'off' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} BED UNOCCUPIED AUTO-ON: Someone got out of bed in dark room, turning on lights
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_on
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} AUTO: Turned ON - Someone got out of bed in dark room."

      # Automatically turn off lights when someone gets into bed
      - conditions:
          - condition: template
            value_template: "{{ bed_occupied }}"
          - condition: template
            value_template: "{{ lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ enable_bed_sensor and bed_sensor_available }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} BED OCCUPIED AUTO-OFF: Someone got into bed, turning off lights
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_off
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} AUTO: Turned OFF - Someone got into bed."

      # Automatically turn on lights when dark and someone present (with bed sensor logic)
      - conditions:
          - condition: template
            value_template: "{{ is_dark or is_extremely_dark }}"
          - condition: template
            value_template: "{{ someone_present }}"
          - condition: template
            value_template: "{{ not lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ not bed_delay_active }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not light_recently_changed }}"
              - condition: template
                value_template: "{{ light_recently_changed and (now() - states[presence_pir_sensor].last_changed).total_seconds() < 2 }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AUTO-ON CONDITIONS MET: is_dark={{
                    is_dark }}, someone_present={{ someone_present }}, 
                    bed_should_delay={{ bed_should_delay_lights }}, 
                    bed_should_prevent={{ bed_should_prevent_lights }}
          # Check bed sensor conditions
          - choose:
              # Bed occupied and should prevent lights entirely
              - conditions:
                  - condition: template
                    value_template: "{{ bed_should_prevent_lights }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} BED PREVENTION: Not turning on lights, bed occupied
              # Bed occupied and should delay lights
              - conditions:
                  - condition: template
                    value_template: "{{ bed_should_delay_lights }}"
                  - condition: template
                    value_template: "{{ bed_delay_helper != '' }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            {{ room_name | upper }} BED DELAY: Starting {{ bed_delay_seconds }}s delay timer
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ bed_delay_helper }}"
                  - delay:
                      seconds: "{{ bed_delay_seconds }}"
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ bed_delay_helper }}"
            # Default: turn on lights normally (no bed issues)
            default:
              - service: input_boolean.turn_on
                target:
                  entity_id: "{{ automation_active_helper }}"
              - service: input_boolean.turn_on
                target:
                  entity_id: "{{ light_auto_on_helper }}"
              - service: input_text.set_value
                target:
                  entity_id: "{{ last_automation_action_helper }}"
                data:
                  value: "{{ now().isoformat() }}"
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ light_switch.startswith('light.') }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: "{{ light_switch }}"
                default:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ light_switch }}"
              - delay:
                  milliseconds: 1500
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ automation_active_helper }}"
              - if:
                  - condition: template
                    value_template: "{{ enable_debug_logs }}"
                then:
                  - service: system_log.write
                    data:
                      level: info
                      message: >-
                        {{ room_name | upper }} AUTO: Turned ON - Dark & Occupied, no bed issues.

      # Automatically turn off lights when vacant (bed sensor doesn't affect turn-off)
      - conditions:
          - condition: template
            value_template: "{{ not someone_present }}"
          - condition: template
            value_template: "{{ lights_on }}"
          - condition: template
            value_template: "{{ not manual_override }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} AUTO-OFF CONDITIONS MET: Turning off lights
          # Cancel any active bed delay when room becomes vacant
          - if:
              - condition: template
                value_template: "{{ enable_bed_sensor and bed_delay_helper != '' and bed_delay_active }}"
            then:
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ bed_delay_helper }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ automation_active_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ last_automation_action_helper }}"
            data:
              value: "{{ now().isoformat() }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_switch.startswith('light.') }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light_switch }}"
            default:
              - service: switch.turn_off
                target:
                  entity_id: "{{ light_switch }}"
          - delay:
              milliseconds: 1500
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ automation_active_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} AUTO: Turned OFF - Vacant."

      # Clear override after vacancy timeout
      - conditions:
          - condition: template
            value_template: "{{ vacant_for_timeout }}"
          - condition: template
            value_template: "{{ manual_override }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          # Also clear bed delay if active
          - if:
              - condition: template
                value_template: "{{ enable_bed_sensor and bed_delay_helper != '' and bed_delay_active }}"
            then:
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ bed_delay_helper }}"
          - delay:
              milliseconds: 100
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    {{ room_name | upper }} OVERRIDE: Cleared after vacancy.
          - service: automation.trigger
            target:
              entity_id: "{{this.entity_id}}"
            data:
              skip_condition: true

      # Clear override after hourly timeout
      - conditions:
          - condition: template
            value_template: "{{ override_timeout }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          # Also clear bed delay if active
          - if:
              - condition: template
                value_template: "{{ enable_bed_sensor and bed_delay_helper != '' and bed_delay_active }}"
            then:
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ bed_delay_helper }}"
          - delay:
              milliseconds: 100
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "{{ room_name | upper }} OVERRIDE: Cleared after hourly timeout."
          - service: automation.trigger
            target:
              entity_id: "{{this.entity_id}}"
            data:
              skip_condition: true

    # No conditions met
    default:
      - if:
          - condition: template
            value_template: "{{ enable_debug_logs }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                {{ room_name | upper }} NO CONDITIONS MET: Monitoring state changes.

  # Final state logging
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: info
          message: >-
            {{ room_name | upper }} FINAL STATE: manual_override={{
            is_state(manual_override_helper, 'on') }}, automation_active={{
            is_state(automation_active_helper, 'on') }}, light_auto_on={{
            is_state(light_auto_on_helper, 'on') }}, lights_state={{
            states(light_switch) }}, bed_delay_active={{ bed_delay_active }}
      - service: system_log.write
        data:
          level: info
          message: >-
            ==================== {{ room_name | upper }} AUTOMATION COMPLETE
            ====================

mode: queued
max: 10